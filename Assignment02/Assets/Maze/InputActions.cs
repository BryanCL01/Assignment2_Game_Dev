//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PaddleControls"",
            ""id"": ""79f8ffe0-c7ed-4d15-84cd-594c1416a538"",
            ""actions"": [
                {
                    ""name"": ""Paddle1Movement"",
                    ""type"": ""Value"",
                    ""id"": ""64a372e8-56d2-41d9-ad30-a7ab69280b2c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Paddle2Movement"",
                    ""type"": ""Value"",
                    ""id"": ""daa9d15d-bc9a-410b-8aa9-1b335bdd3179"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2f1497f4-616b-4869-98bc-d24527dad347"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paddle1Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""774834ba-3edc-4443-979e-777654d3fd73"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paddle1Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f37e9443-9d50-4de4-b8ce-3034351dc2dc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paddle1Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5c74b9ef-d9c8-454f-94da-0aa4ded87b63"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paddle1Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f8679601-dd8e-46fb-9a7e-0a71ea2eb35c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paddle2Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f1b004dc-dff3-403c-b843-4c386ba3c2b3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paddle2Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1b94aee2-5e5c-4194-a217-d668288d7755"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paddle2Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""65f0695e-82b1-4605-b80f-82d529cd2e2a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paddle2Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PaddleControls
        m_PaddleControls = asset.FindActionMap("PaddleControls", throwIfNotFound: true);
        m_PaddleControls_Paddle1Movement = m_PaddleControls.FindAction("Paddle1Movement", throwIfNotFound: true);
        m_PaddleControls_Paddle2Movement = m_PaddleControls.FindAction("Paddle2Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PaddleControls
    private readonly InputActionMap m_PaddleControls;
    private List<IPaddleControlsActions> m_PaddleControlsActionsCallbackInterfaces = new List<IPaddleControlsActions>();
    private readonly InputAction m_PaddleControls_Paddle1Movement;
    private readonly InputAction m_PaddleControls_Paddle2Movement;
    public struct PaddleControlsActions
    {
        private @InputActions m_Wrapper;
        public PaddleControlsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Paddle1Movement => m_Wrapper.m_PaddleControls_Paddle1Movement;
        public InputAction @Paddle2Movement => m_Wrapper.m_PaddleControls_Paddle2Movement;
        public InputActionMap Get() { return m_Wrapper.m_PaddleControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PaddleControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPaddleControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PaddleControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PaddleControlsActionsCallbackInterfaces.Add(instance);
            @Paddle1Movement.started += instance.OnPaddle1Movement;
            @Paddle1Movement.performed += instance.OnPaddle1Movement;
            @Paddle1Movement.canceled += instance.OnPaddle1Movement;
            @Paddle2Movement.started += instance.OnPaddle2Movement;
            @Paddle2Movement.performed += instance.OnPaddle2Movement;
            @Paddle2Movement.canceled += instance.OnPaddle2Movement;
        }

        private void UnregisterCallbacks(IPaddleControlsActions instance)
        {
            @Paddle1Movement.started -= instance.OnPaddle1Movement;
            @Paddle1Movement.performed -= instance.OnPaddle1Movement;
            @Paddle1Movement.canceled -= instance.OnPaddle1Movement;
            @Paddle2Movement.started -= instance.OnPaddle2Movement;
            @Paddle2Movement.performed -= instance.OnPaddle2Movement;
            @Paddle2Movement.canceled -= instance.OnPaddle2Movement;
        }

        public void RemoveCallbacks(IPaddleControlsActions instance)
        {
            if (m_Wrapper.m_PaddleControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPaddleControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PaddleControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PaddleControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PaddleControlsActions @PaddleControls => new PaddleControlsActions(this);
    public interface IPaddleControlsActions
    {
        void OnPaddle1Movement(InputAction.CallbackContext context);
        void OnPaddle2Movement(InputAction.CallbackContext context);
    }
}
